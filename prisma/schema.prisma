generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String      @unique
  email         String      @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  role          Role        @default(USER)
  createdAt     DateTime    @default(now())
  lastModified  DateTime    @updatedAt
  Borrow        Borrow[]
  session       Session[]   @relation(name: "SessionToUser")
  accounts      Account[]   @relation(name: "AccountToUser")
  Book          Book[]
  Reference     Reference[]
}

model Session {
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "SessionToUser")
}

model Account {
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, name: "AccountToUser")

  @@unique([provider, providerAccountId])
}

model Borrow {
  id           String   @id @default(cuid())
  userId       String
  bookId       Int
  isActive     Boolean
  returned     Boolean
  startDate    DateTime
  endDate      DateTime
  lastModified DateTime @updatedAt
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
  book         Book     @relation(fields: [bookId], references: [id])
}

model Book {
  id           Int       @id @default(autoincrement())
  referenceId  Int
  createdBy    String
  isBorrowed   Boolean
  createdAt    DateTime  @default(now())
  lastModified DateTime  @updatedAt
  reference    Reference @relation(fields: [referenceId], references: [id])
  user         User      @relation(fields: [createdBy], references: [id])
  Borrow       Borrow[]
}

model Reference {
  id              Int      @id @default(autoincrement())
  createdBy       String
  title           String
  publisher       String
  publicationYear Int
  ISBN            String   @unique
  genre           String
  availableUnits  Int
  createdAt       DateTime @default(now())
  lastModified    DateTime @updatedAt
  user            User     @relation(fields: [createdBy], references: [id])
  Book            Book[]
}

enum Role {
  ADMIN
  USER
}
